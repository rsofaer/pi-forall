module Let where

or : Bool -> Bool -> Bool
or = \b1 b2. if b1 then True else b2

not : Bool -> Bool
not = \b . if b then False else True

and : Bool -> Bool -> Bool
and = \b1 b2. if b1 then b2 else False

eq_bool : Bool -> Bool -> Bool
eq_bool = \ b1 b2 . 
  if b1 then b2 else (not b2)  


y = let x = or in x

-- y = or
