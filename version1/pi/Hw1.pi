module Hw1 where

-- HW #1: get this file to type check by adding typing rules
-- for booleans and sigma types to TypeCheck.hs in 'version1'

-- prelude operations on boolean values

or : Bool -> Bool -> Bool
or = \b1 b2. if b1 then True else b2

not : Bool -> Bool
not = \b . if b then False else True

and : Bool -> Bool -> Bool
and = \b1 b2. if b1 then b2 else False

eq_bool : Bool -> Bool -> Bool
eq_bool = \ b1 b2 . 
  if b1 then b2 else (not b2)  

T : Type
T = (x:Type) -> x
-- Should not typecheck as conditional must be bool
-- eq2 : T -> Bool -> Bool
-- eq2 = \ b1 b2 . if b1 then b2 else (not b2)  

-- Should not typecheck as t and f clauses must be the same type
-- in the absence of sum types
-- eq3 : Bool -> Bool -> Bool
-- eq3 = \ b1 b2 . if b1 then b2 else ((\ x . b2): Bool -> Bool)

-- Should not typecheck as t and f clauses must be the correct type
-- in the absence of sum types
eq3 : Bool -> Bool -> Bool
eq3 = \ b1 b2 . if b1 then ((\ x . not b2): Bool -> Bool) else ((\ x . b2): Bool -> Bool)
--- sigma types

double : (A:Type) -> (x : A) -> { x : A | A }
double = \A x. (x,x) 

fst : (A:Type) -> (B : A -> Type) -> { x : A | B x } -> A
fst = \A B p. let (x0,y) = p in x0

